buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
    baseName = 'jklustor-web-example'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// See http://stackoverflow.com/questions/23217002/how-do-i-tell-spring-boot-which-main-class-to-use-for-the-executable-jar
springBoot {
    mainClass = "com.chemaxon.clustering.web.application.JklustorWebApplication"
}

// Build configuration: This project depends on a ChemAxon proprietary API which is not available from a public open
// repository. Users might prefer to use an already downloaded distribution or to access a ChemAxon provided repository.
// See http://mrhaki.blogspot.hu/2010/09/gradle-goodness-different-ways-to-set.html on how to set project properties
if (project.hasProperty('cxn_jchem_jar')) {
    // Location of jchem.jar is specified with -Pcxn_jchem_jar=<JCHEM JAR FILE>
    // Check if pointed location is an existing file

    def jchem_jar_file = new File(project.getProperty('cxn_jchem_jar'));
    if (!jchem_jar_file.exists()) {
        ant.fail("File not found: " + jchem_jar_file + ". Please specify location of jchem.jar")
    }
    if (!jchem_jar_file.isFile()) {
        ant.fail("Not a regular file: " + jchem_jar_file + ". Please specify location of jchem.jar")
    }
    println "Using manually downloaded JChem distribution from " + jchem_jar_file

    // Spring boot jars are retrieved from the Central Repository
    repositories {
        mavenCentral()
    }


    // For compilation depend only the specified jchem.jar file
    // This file reference all additional dependencies using Manifest Class-Path attribute.
    dependencies {
        compile files(jchem_jar_file)
    }

} else if (project.hasProperty('cxn_repo_user') && project.hasProperty('cxn_repo_pass')) {
    // Use repository.chemaxon.com
    println "Using repository.chemaxon.com and Maven Central to fetch jchem.jar and other dependencies using specified username and password"

    repositories {
        mavenCentral() // Some 3rd party dependencies might be missing; access Maven Central for them
        maven {
            url 'https://repository.chemaxon.com/artifactory/ext-release-local'
            credentials {
                username project.getProperty('cxn_repo_user')
                password project.getProperty('cxn_repo_pass')
            }
        }
    }

    // Dependencies of jchem.jar are retrieved from ChemAxon / Maven Central using the standard dependency management
    // Spring Boot retrieved later
    dependencies {
        compile(group: 'com.chemaxon', name: 'jchem', version: '16.4.11.0')
    }


} else {
    // Reference for jchem.jar is not specified
    ant.fail('Location/access of jchem.jar is not specified. Use "-Pcxn_jchem_jar=<JCHEM.JAR FILE LOCATION>" or "-Pcxn_repo_user=<USERNAME> -Pcxn_repo_pass="<PASSWORD>" or an alternative property setting mechanism. See README.md for details.');
}


// Use classpath jar file to avoid crash on Windows
// See http://tuhrig.de/gradles-bootrun-and-windows-command-length-limit/
// Note that the manifest of the created pathing jar contains absolute pathnames so it is not portable
task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'
    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst(/file:\/+/, '/')
            }.join(' ')
        }
    }
}

// Customize jar task by referencing the pathing jar in its manifest classpath
jar {
    dependsOn pathingJar
    doFirst {
        manifest {
            attributes "Class-Path": pathingJar.archivePath.getName()
        }
    }
}

bootRun {
    dependsOn pathingJar
    doFirst {
        classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
    }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-jersey')
    compile('org.springframework.boot:spring-boot-starter-web')

    // See https://jersey.java.net/documentation/latest/media.html#d0e9177
    compile('org.glassfish.jersey.media:jersey-media-multipart:2.22.2')

    // See https://jira.exoplatform.org/browse/CRASH-247
    compile('org.springframework.boot:spring-boot-starter-remote-shell')


    // Use Guava libraries
    compile('com.google.guava:guava:16.0.1')

    // use boot-devtools, see http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    // compile("org.springframework.boot:spring-boot-devtools")

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}


// Expose static content by the web server
// Contents of /static on the classpath are exposed by default, see http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-static-content
// Lets use src/main/static instead of src/main/resources/static
processResources {
    from("src/main/static") {
        into "static"
    }
}


eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}





