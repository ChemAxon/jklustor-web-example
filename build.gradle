// Set up dependency management environment.
//
// This project depends on a ChemAxon proprietary API which is not available from a public open
// repository. Setting up a repository available for ChemAxon users (referenced as "public repository" and
// "hub.chemaxon.com") is currently in progress.
//
// This project can be built using ChemAxon internal environment or by using the above mentioned public repository.
// For details, please see README.md.
//
// author: Gabor Imre

buildscript {
    // SpringBoot plugin and optionally Gluon requires the buildscript block declaration
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    // We can not put buildscript blocks into the conditional statements below.
    // However using this conditional inside the top level buildscript block seemingly works.
    if (!project.hasProperty('cxnHubUser') && !project.hasProperty('cxnHubPass')) {
        // For CXN internal use only
        // When no further properties are defined, this mode is is selected.

        println "-------------------------------------------------------------------------------------------"
        println "[buildscript block] ChemAxon internal build environment (Gluon). For details see README.md"
        println "-------------------------------------------------------------------------------------------"
        println ""

        if (!project.hasProperty('cxnRepository')) {
            println "ERROR: ChemAxon internal build environment (Gluon) is not configured properly. See README.md"
            println "       For open-source configuration, use -PcxnHubUser=<USER> -PcxnHubPass=<PASSWORD>"
            println ""
        }

        repositories cxnRepository
        dependencies.classpath "com.chemaxon:gluon-plugins:${branchName}-+"
    } else {
        repositories {
            mavenCentral()
        }
    }
    dependencies.classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
}

// Set up repositories for compilation, and optionally Gluon related plugin(s)
if (project.hasProperty('cxn_repo_user') || project.hasProperty('cxn_repo_pass')) {
    // Previous public reporsitory configuration is used, notify user and fail
    // Note that previous version of this projects use a now deprecated repository "repository.chemaxon.com"
    println "-------------------------------------------------------------------------------"
    println "Properties \"cxn_repo_user\" / \"cxn_repo_pass\" found."
    println ""
    println "ChemAxon public repository changed, please see README.md for details."
    println "Recent versions of ChemAxon proprietary APIs required for building this project"
    println "are not available from the deprecated repository \"repository.chemaxon.com\"."
    println "Please set up credentials for using \"hub.chemaxon.com\" as described in file"
    println "README.md"
    println ""
    println "This build will fail."
    println "-------------------------------------------------------------------------------"
    println ""
    println ""
    println ""
    println ""
    ant.fail("ChemAxon public repository is changed. See README.md for details.")

} else if (project.hasProperty('cxn_jchem_jar')) {
    // Manual download of JChem distribution selected, currently not available (some dependencies are only available on
    // hub.chemaxon.com, not in jchem), notify user and fail
    println "-------------------------------------------------------------------------------"
    println "Property \"cxn_jchem_jar\" is present."
    println ""
    println "Using manually downloaded JChem distribution is not possible currently."
    println "Please see README.md for details on using ChemAxon public repository"
    println "\"hub.chemaxon.com\"."
    println ""
    println "This build will fail."
    println "-------------------------------------------------------------------------------"
    println ""
    println ""
    println ""
    println ""
    ant.fail("Using manually downloaded JChem distribution is not possible currently. See README.md for details.")

} else if (project.hasProperty('cxnHubUser') || project.hasProperty('cxnHubPass')) {
    // Open source configuration available to ChemAxon public repository (hub.chemaxon.com) users

    println "-------------------------------------------------------------------------------------------"
    println "Property \"cxnHubUser\" / \"cxnHubPass\" found."
    println "Using ChemAxon public repository \"hub.chemaxon.com\" for accessing ChemAxon proprietary APIs"
    println "-------------------------------------------------------------------------------------------"

    if (!project.hasProperty('cxnHubUser') || !project.hasProperty('cxnHubPass')) {
        ant.fail("Both properties \"cxnHubUser\" and \"cxnHubPass\" must be definied for open source configuration.");
    }

    // Dependencies managed by ChemAxon internal CI environment (gluon) are referenced
    // using  "cxnProject("<ORG>", "<DEP>"). Closure 'cxnProject' is normally defined by
    // one of the Gradle plugins used in the internal environment.

    // When using this "Open-source" configuration with ChemAxon public repository "hub.chemaxon.com"
    // the dependencies are referenced using the associated release version. Closure 'cxnProject'
    // is defined here to append this fixed version.
    project.metaClass.cxnProject = { group, name -> "${group}:${name}:${cxnReleaseVersion}" }

    repositories {
        maven {
            url "${cxnHubContextUrl}/libs-release"
            credentials {
                username "${cxnHubUser}"
                password "${cxnHubPass}"
            }
        }
        // mavenCentral()
    }
} else {
    // Using Gluon based CXN dependency version management, currently intended for ChemAxon internal use only.

    println "-------------------------------------------------------------------------------------------"
    println "Using Gluon for dependency version management. This is for ChemAxon internal use only."
    println "For details see README.md"
    println "-------------------------------------------------------------------------------------------"

    apply plugin: 'cxn-gluon'
    apply plugin: 'cxn-java'
}

// End of configuration discovery logic ===================================

apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'spring-boot'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8



dependencies {
    // Spring boot dependencies
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-jersey')
    compile('org.springframework.boot:spring-boot-starter-web')

    // See https://jersey.java.net/documentation/latest/media.html#d0e9177
    compile('org.glassfish.jersey.media:jersey-media-multipart:2.22.2')

    // See https://jira.exoplatform.org/browse/CRASH-247
    compile('org.springframework.boot:spring-boot-starter-remote-shell')

     // use boot-devtools, see http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    // compile("org.springframework.boot:spring-boot-devtools")

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')


    // This dependency declaration format (using cxnProject('<group>', '<name>')) is required by ChemAxon proprietary
    // CI environment 'Gluon'. In the 'Open source' configuration this closure is defined above to translate this
    // to simple '<group>:<name>:<releaseversion>' dependency declarations which are compatible with ChemAxon public
    // repository (hub.chemaxon.com)
    compile cxnProject('com.chemaxon', 'overlap-cli-utils')
    compile cxnProject('com.chemaxon', 'overlap-core')
    compile cxnProject('com.chemaxon', 'overlap-descriptors')
    compile cxnProject('com.chemaxon', 'overlap-img')

    compile 'commons-logging:commons-logging:1.1.1'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'com.google.guava:guava:16.0.1'

    compile 'com.google.code.findbugs:annotations:2.0.1'

    // testCompile cxnProject('com.chemaxon', 'disco-test-utils')
    // testCompile cxnProject('com.chemaxon', 'disco-test-utils-mol')
    testCompile 'junit:junit:4.11'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:1.10.19'
}

// See http://stackoverflow.com/questions/23217002/how-do-i-tell-spring-boot-which-main-class-to-use-for-the-executable-jar
springBoot {
    mainClass = "com.chemaxon.clustering.web.application.JklustorWebApplication"
}


// see http://stackoverflow.com/questions/15406469/how-to-generate-html-output-using-gradle-findbugs-plugin
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Expose static content by the web server
// Contents of /static on the classpath are exposed by default,
// see http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-static-content
// Lets use src/main/static instead of src/main/resources/static
processResources {
    from("src/main/static") {
        into "static"
    }
}

// Use classpath jar file to avoid crash on Windows
// See http://tuhrig.de/gradles-bootrun-and-windows-command-length-limit/
// Note that the manifest of the created pathing jar contains absolute pathnames so it is not portable
task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'
    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst(/file:\/+/, '/')
            }.join(' ')
        }
    }
}

// Customize jar task by referencing the pathing jar in its manifest classpath
jar {
    dependsOn pathingJar
    baseName = 'jklustor-web-example'
    version = examplesVersion

    doFirst {
        manifest {
            attributes "Class-Path": pathingJar.archivePath.getName()
        }
    }
}


bootRun {
    dependsOn pathingJar
    doFirst {
        classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
    }
}


task createScripts(dependsOn: classes, description: 'Create launcher scripts for command line interfaces.') << {
    def scriptsDir = file("${buildDir}/scripts/")
    scriptsDir.deleteDir()
    scriptsDir.mkdir()

    def createScript = { name, className ->

        def script = new File(scriptsDir, name)
        println "Create script " + script + " for main class " + className

        // do not add extra 'bin' dir to the classpath
        script.text = String.format(
            'java -Xmx4g -classpath "%s" %s "$@"\n',
            (sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath).asPath, className)
            //(sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath + files('src/config')).asPath, className)
        script.setExecutable(true)
    }

    def xml = (new XmlParser()).parse("${projectDir}/src/main/scripts/scripts-info.xml")
    xml.'script'.each { m -> createScript(m.@basename, m.@mainclass) }
}